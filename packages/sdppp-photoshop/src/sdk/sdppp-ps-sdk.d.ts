// Generated by dts-bundle-generator v9.5.1

declare function registerProxyDomains(domains: string): void;
export declare const sdpppSDK: {
	init(): Promise<import("@modelcontextprotocol/sdk/client/index.js").Client<{
		method: string;
		params?: {
			[x: string]: unknown;
			_meta?: {
				[x: string]: unknown;
				progressToken?: string | number | undefined;
			} | undefined;
		} | undefined;
	}, {
		method: string;
		params?: {
			[x: string]: unknown;
			_meta?: {
				[x: string]: unknown;
			} | undefined;
		} | undefined;
	}, {
		[x: string]: unknown;
		_meta?: {
			[x: string]: unknown;
		} | undefined;
	}>>;
	stores: {
		PhotoshopStore: Omit<import("zustand").StoreApi<{
			uname: string;
			activeDocumentID: number;
			actions: string[];
			theme: string;
			contentWebviewFocusing: boolean;
			comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
			comfyWebviewHTTPCode: number;
			comfyWebviewLoadError: string;
			comfyWebviewLoading: boolean;
			comfyWebviewURL: string;
			comfyAutoRunning: boolean;
			loaded: boolean;
			sdpppX?: any;
		}>, "persist"> & {
			persist: {
				setOptions: (options: Partial<import("zustand/middleware").PersistOptions<{
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewHTTPCode: number;
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}, unknown>>) => void;
				clearStorage: () => void;
				rehydrate: () => Promise<void> | void;
				hasHydrated: () => boolean;
				onHydrate: (fn: (state: {
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewHTTPCode: number;
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}) => void) => () => void;
				onFinishHydration: (fn: (state: {
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewHTTPCode: number;
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}) => void) => () => void;
				getOptions: () => Partial<import("zustand/middleware").PersistOptions<{
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewHTTPCode: number;
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}, unknown>>;
			};
		};
		PhotoshopActionStore: import("zustand").StoreApi<{
			setComfyWebviewURL: (args_0: string, ...args: unknown[]) => void;
			setComfyAutoRunning: (args_0: boolean, ...args: unknown[]) => void;
		}>;
		WebviewStore: import("zustand").StoreApi<{}>;
		ComfyStore: import("zustand").StoreApi<{
			progress: number;
			widgetableStructure: {
				options: Record<string, any>;
				widgetableID: string;
				widgetablePath: string;
				nodes: Record<string, {
					title: string;
					id: string;
					widgets: ({
						options: {
							required: boolean;
							maxCount?: number | undefined;
							maskMode?: boolean | undefined;
						};
						name: string;
						outputType: "images";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "masks";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "string";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "boolean";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
							min?: number | undefined;
							max?: number | undefined;
							step?: number | undefined;
							random?: boolean | undefined;
						};
						name: string;
						outputType: "number";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
						};
						name: string;
						outputType: "combo";
						uiWeight: number;
					})[];
					uiWeightSum: number;
				}>;
				nodeIndexes: string[];
			};
			widgetableValues: Record<string, any[]>;
			widgetableErrors: Record<string, string>;
			queueSize: number;
			lastError: string;
			executingNodeTitle: string;
			comfyUserToken: string;
			comfyOrgLoggedIn: boolean;
			comfyOrgAPIKey: string;
			useSliderForNumberWidget: boolean;
		}>;
		SDPPPPStore: Omit<import("zustand").StoreApi<{
			isLogin: boolean;
			loginMessage: string;
			token: string;
		}>, "persist"> & {
			persist: {
				setOptions: (options: Partial<import("zustand/middleware").PersistOptions<{
					isLogin: boolean;
					loginMessage: string;
					token: string;
				}, unknown>>) => void;
				clearStorage: () => void;
				rehydrate: () => Promise<void> | void;
				hasHydrated: () => boolean;
				onHydrate: (fn: (state: {
					isLogin: boolean;
					loginMessage: string;
					token: string;
				}) => void) => () => void;
				onFinishHydration: (fn: (state: {
					isLogin: boolean;
					loginMessage: string;
					token: string;
				}) => void) => () => void;
				getOptions: () => Partial<import("zustand/middleware").PersistOptions<{
					isLogin: boolean;
					loginMessage: string;
					token: string;
				}, unknown>>;
			};
		};
		SDPPPPActionStore: import("zustand").StoreApi<{
			loginByPassword: (args_0: string, args_1: string, ...args: unknown[]) => void;
		}>;
	};
	plugins: {
		ComfyCaller: any;
		uxp: {
			openExternalLink: (url: string) => Promise<boolean>;
			removeItem: (key: string) => Promise<boolean>;
			getItem: (key: string) => Promise<any>;
			setItem: (key: string, value: any) => Promise<boolean>;
		};
		fetchProxy: {
			registerProxyDomains: typeof registerProxyDomains;
		};
		imaging: {
			requestImageGet: () => Promise<{
				thumbnail_url: string;
				file_token: string;
				source: string;
			}>;
			requestMaskGet: () => Promise<{
				thumbnail_url: string;
				file_token: string;
				source: string;
			}>;
			requestImageSend: (url: string, source: string) => Promise<void>;
		};
	};
};

export {};
