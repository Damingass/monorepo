// Generated by dts-bundle-generator v9.5.1

declare function registerProxyDomains(domains: string): void;
declare class PromptResultStream {
	private promptIds;
	private results;
	private resolvers;
	private isComplete;
	constructor(promptIds: string[]);
	private handleResult;
	private handleError;
	[Symbol.asyncIterator](): AsyncIterator<{
		prompt_id: string;
		images: {
			url: string;
			thumbnail: string;
		}[];
	}>;
	cleanup(): void;
}
export declare const sdpppSDK: {
	init(): Promise<import("@modelcontextprotocol/sdk/client/index.js").Client<{
		method: string;
		params?: {
			[x: string]: unknown;
			_meta?: {
				[x: string]: unknown;
				progressToken?: string | number | undefined;
			} | undefined;
		} | undefined;
	}, {
		method: string;
		params?: {
			[x: string]: unknown;
			_meta?: {
				[x: string]: unknown;
			} | undefined;
		} | undefined;
	}, {
		[x: string]: unknown;
		_meta?: {
			[x: string]: unknown;
		} | undefined;
	}>>;
	stores: {
		PhotoshopStore: Omit<import("zustand").StoreApi<{
			uname: string;
			activeDocumentID: number;
			actions: string[];
			theme: string;
			contentWebviewFocusing: boolean;
			comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
			comfyWebviewLoadError: string;
			comfyWebviewLoading: boolean;
			comfyWebviewURL: string;
			comfyAutoRunning: boolean;
			loaded: boolean;
			sdpppX?: any;
		}>, "persist"> & {
			persist: {
				setOptions: (options: Partial<import("zustand/middleware").PersistOptions<{
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}, unknown>>) => void;
				clearStorage: () => void;
				rehydrate: () => Promise<void> | void;
				hasHydrated: () => boolean;
				onHydrate: (fn: (state: {
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}) => void) => () => void;
				onFinishHydration: (fn: (state: {
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}) => void) => () => void;
				getOptions: () => Partial<import("zustand/middleware").PersistOptions<{
					uname: string;
					activeDocumentID: number;
					actions: string[];
					theme: string;
					contentWebviewFocusing: boolean;
					comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected" | "timedout";
					comfyWebviewLoadError: string;
					comfyWebviewLoading: boolean;
					comfyWebviewURL: string;
					comfyAutoRunning: boolean;
					loaded: boolean;
					sdpppX?: any;
				}, unknown>>;
			};
		};
		PhotoshopActionStore: import("zustand").StoreApi<{
			setComfyWebviewURL: (args_0: string, ...args: unknown[]) => void;
			setComfyAutoRunning: (args_0: boolean, ...args: unknown[]) => void;
		}>;
		WebviewStore: import("zustand").StoreApi<{}>;
		ComfyStore: import("zustand").StoreApi<{
			progress: number;
			widgetableStructure: {
				options: Record<string, any>;
				widgetableID: string;
				widgetablePath: string;
				nodes: Record<string, {
					title: string;
					id: string;
					widgets: ({
						options: {
							required: boolean;
							maxCount?: number | undefined;
							maskMode?: boolean | undefined;
						};
						name: string;
						outputType: "images";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "masks";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "string";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "boolean";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
							min?: number | undefined;
							max?: number | undefined;
							step?: number | undefined;
							random?: boolean | undefined;
						};
						name: string;
						outputType: "number";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
						};
						name: string;
						outputType: "combo";
						uiWeight: number;
					})[];
					uiWeightSum: number;
				}>;
				nodeIndexes: string[];
			};
			widgetableValues: Record<string, any[]>;
			widgetableErrors: Record<string, string>;
			queueSize: number;
			lastError: string;
			executingNodeTitle: string;
			comfyUserToken: string;
			comfyOrgLoggedIn: boolean;
			comfyOrgAPIKey: string;
			useSliderForNumberWidget: boolean;
		}>;
	};
	plugins: {
		ComfyCaller: {
			runWorkflow: (workflow: string) => Promise<{
				success: boolean;
			}>;
			openWorkflow: (workflow_path: string, reset?: boolean) => Promise<{
				success: boolean;
			}>;
			run: (size: number) => Promise<{
				stream: PromptResultStream;
				success: boolean;
				nodeErrors?: Record<string, string> | undefined;
				prompt_ids?: string[] | undefined;
			}>;
			list: (listMode?: string, sdpppID?: string, sdpppToken?: string) => Promise<{
				workflows: string[];
				error?: string | undefined;
			}>;
			uploadImage: (image: ArrayBuffer, filename: string, overwrite?: boolean) => Promise<{
				name: string;
			}>;
			setWidgetValue: (values: Array<{
				nodeID: any;
				widgetIndex: number;
				value: any;
			}>) => Promise<void>;
			save: (workflow_path: string, from_sid?: string) => Promise<{
				success: boolean;
			}>;
			setNodeTitle: (node_id: any, title: string) => Promise<{
				success: boolean;
			}>;
			logout: () => Promise<{
				success: boolean;
			}>;
			interrupt: () => Promise<{
				success: boolean;
			}>;
			clearQueue: () => Promise<{
				success: boolean;
			}>;
			reboot: () => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			setComfyOrgAPIKey: (api_key: string) => Promise<{
				success: boolean;
			}>;
		};
		uxp: {
			openExternalLink: (url: string) => Promise<boolean>;
			removeItem: (key: string) => Promise<boolean>;
			getItem: (key: string) => Promise<any>;
			setItem: (key: string, value: any) => Promise<boolean>;
		};
		fetchProxy: {
			registerProxyDomains: typeof registerProxyDomains;
		};
		imaging: {
			requestImageGet: () => Promise<{
				thumbnail_url: string;
				file_token: string;
				source: string;
			}>;
			requestImageSend: (url: string, source: string) => Promise<void>;
			getBufferByToken: (file_token: string) => Promise<Buffer<ArrayBufferLike>>;
		};
	};
};

export {};
