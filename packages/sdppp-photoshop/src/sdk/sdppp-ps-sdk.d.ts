// Generated by dts-bundle-generator v9.5.1

import { StoreApi } from 'zustand';

export interface NodeStore<T = any> extends StoreApi<T> {
	getState(): T;
	setState(partial: Partial<T> | ((state: T) => Partial<T>)): void;
	subscribe(listener: (state: T, prevState: T) => void): () => void;
}
export interface StreamActionIterator<T> {
	[Symbol.asyncIterator](): AsyncIterableIterator<T>;
}
declare function registerProxyDomains(domains: string): void;
export declare const sdpppSDK: {
	init(): Promise<void>;
	logger: import("debug").Debugger;
	stores: {
		PhotoshopStore: NodeStore<{
			actions: string[];
			uname: string;
			activeDocumentID: number;
			layers: {
				name: string;
				id: number;
				identify: string;
			}[];
			theme: string;
			sdpppX: Record<string, any>;
			locale: "zh-CN" | "en-US";
			comfyWebviewConnectStatus: "connecting" | "connected" | "disconnected";
			comfyWebviewLoadError: string;
			comfyWebviewLoading: boolean;
			comfyWebviewVersion: string;
			comfyAutoRunning: boolean;
			comfyHTTPCode: number;
			comfyURL: string;
			sdkWebviewFocusing: boolean;
			sdkWebviewConnectStatus: "connecting" | "connected" | "disconnected";
			isLogin: boolean;
<<<<<<< HEAD
			isGuest: boolean;
=======
>>>>>>> db8a3fe (i18n)
			requestingLogin: boolean;
			loginMessage: string;
			token: string;
			userInfo: Record<string, any>;
		}>;
		WebviewStore: NodeStore<{}>;
		ComfyStore: NodeStore<{
			progress: number;
			widgetableStructure: {
				options: Record<string, any>;
				nodes: Record<string, {
					title: string;
					id: string;
					widgets: ({
						options: {
							required: boolean;
							maxCount?: number | undefined;
							maskMode?: boolean | undefined;
						};
						name: string;
						outputType: "images";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "masks";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "string";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
						};
						name: string;
						outputType: "boolean";
						uiWeight: number;
					} | {
						options: {
							required: boolean;
							min?: number | undefined;
							max?: number | undefined;
							step?: number | undefined;
							random?: boolean | undefined;
							slider?: boolean | undefined;
						};
						name: string;
						outputType: "number";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
							labels?: string[] | undefined;
						};
						name: string;
						outputType: "combo";
						uiWeight: number;
					} | {
						options: {
							values: string[];
							required: boolean;
						};
						name: string;
						outputType: "segment";
						uiWeight: number;
					})[];
					uiWeightSum: number;
				}>;
				widgetableID: string;
				widgetablePath: string;
<<<<<<< HEAD
				note: string;
				nodeIndexes: string[];
=======
				nodeIndexes: string[];
				note?: string | undefined;
>>>>>>> db8a3fe (i18n)
			};
			widgetableValues: Record<string, any[]>;
			widgetableErrors: Record<string, string>;
			queueSize: number;
			lastError: string;
			executingNodeTitle: string;
			graphProgress: number;
			comfyUserToken: string;
			comfyOrgLoggedIn: boolean;
			comfyOrgAPIKey: string;
			comfyWSState: "connected" | "reconnecting";
			lastRunTime: number;
		}>;
	};
	plugins: {
		ComfyCaller: {
			setNodeTitle: (data: {
				title: string;
				node_id: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			reboot: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
				error?: string | undefined;
			}>;
			setComfyOrgAPIKey: (data: {
				api_key: string;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			logout: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			setWidgetValue: (data: {
				values: {
					value: string | number | boolean | any[] | Record<string, any>;
					nodeID: string;
					widgetIndex: number;
				}[];
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			openWorkflow: (data: {
				workflow_path: string;
				reset: boolean;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			openWorkflowJSON: (data: {
				workflow_path: string;
				workflow_content: Record<string, any>;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			listWorkflows: (data: {
				listMode?: string | undefined;
				sdpppID?: string | undefined;
				sdpppToken?: string | undefined;
			}, signal?: AbortSignal) => Promise<{
				workflows: string[];
				error?: string | undefined;
			}>;
			saveWorkflow: (data: {
				workflow_path: string;
				from_sid?: string | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
			run: (data: {
				size: number;
			}, signal?: AbortSignal) => Promise<StreamActionIterator<{
				success: boolean;
				images?: {
					url: string;
					thumbnail: string;
				}[] | undefined;
				nodeErrors?: Record<string, string> | undefined;
				prompt_ids?: string[] | undefined;
			}>>;
			stopAll: (data: {}, signal?: AbortSignal) => Promise<{
				success: boolean;
			}>;
		};
		photoshop: {
			register: (data: {
<<<<<<< HEAD
				passwordPayload: {
=======
				passwordPayload?: {
>>>>>>> db8a3fe (i18n)
					username: string;
					password: string;
				} | {
					email: string;
					password: string;
				} | {
					password: string;
					phone: string;
<<<<<<< HEAD
				} | {
					password: string;
					identifier: string;
				};
			} | {
				passcodePayload: {
=======
				} | undefined;
				passcodePayload?: {
>>>>>>> db8a3fe (i18n)
					code: string;
					phone: string;
				} | {
					code: string;
					email: string;
<<<<<<< HEAD
				};
			}, signal?: AbortSignal) => Promise<{}>;
			login: (data: {
				passwordPayload: {
					username: string;
					password: string;
				} | {
					email: string;
					password: string;
				} | {
					password: string;
					phone: string;
				} | {
					password: string;
					identifier: string;
				};
			} | {
				passcodePayload: {
					code: string;
					phone: string;
				} | {
					code: string;
					email: string;
				};
=======
				} | undefined;
			}, signal?: AbortSignal) => Promise<{}>;
			login: (data: {
				passwordPayload?: {
					username: string;
					password: string;
				} | undefined;
				passcodePayload?: {
					code: string;
					phone: string;
				} | undefined;
>>>>>>> db8a3fe (i18n)
			}, signal?: AbortSignal) => Promise<{}>;
			sendPassCode: (data: {
				email?: string | undefined;
				phone?: string | undefined;
			}, signal?: AbortSignal) => Promise<{}>;
			logout: (data: {}, signal?: AbortSignal) => Promise<{}>;
<<<<<<< HEAD
			guestLogin: (data: {}, signal?: AbortSignal) => Promise<{}>;
=======
>>>>>>> db8a3fe (i18n)
			log: (data: {
				messages: string[];
				level: "error" | "info" | "log" | "warn";
			}, signal?: AbortSignal) => Promise<{}>;
			openExternalLink: (data: {
				url: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			getStorage: (data: {
				key: string;
			}, signal?: AbortSignal) => Promise<{
				value: string;
				error?: string | undefined;
			}>;
			setStorage: (data: {
				value: string;
				key: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			removeStorage: (data: {
				key: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			keyboardAction: (data: {
				keycode: string;
			}, signal?: AbortSignal) => Promise<{}>;
			setComfyWebviewURL: (data: {
				url: string;
			}, signal?: AbortSignal) => Promise<{}>;
			uploadComfyImage: (data: {
				uploadInput: {
					type: "token" | "buffer";
					fileName: string;
					tokenOrBuffer?: any;
				};
				overwrite: boolean;
			}, signal?: AbortSignal) => Promise<{
				name: string;
			}>;
			proxiedFetch: (data: {
				url: string;
				method?: string | undefined;
				headers?: Record<string, string> | undefined;
				body?: any;
				bodyType?: "text" | "json" | "formData" | undefined;
			}, signal?: AbortSignal) => Promise<{
				success: boolean;
				status?: number | undefined;
				data?: any;
				error?: string | undefined;
				headers?: Record<string, string> | undefined;
				statusText?: string | undefined;
			}>;
			doGetImage: (data: {
				content: string;
				boundary: "canvas" | "curlayer" | "selection";
				imageSize: number;
				imageQuality: number;
				cropBySelection: "no" | "positive" | "negative";
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
			doGetMask: (data: {
				reverse: boolean;
				content: "canvas" | "curlayer" | "selection";
				imageSize: number;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
			doSendImage: (data: {
				url: string;
				source: string;
				selection: "newdoc_canvas" | "newlayer_canvas" | "newlayer_curlayer" | "newlayer_selection" | "curlayer_canvas" | "curlayer_curlayer" | "curlayer_selection";
				cropBySelection: "no" | "positive" | "negative";
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			requestImageGet: (data: {}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
			requestImageSend: (data: {
				url: string;
				source: string;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
			}>;
			requestMaskGet: (data: {
				isMask: boolean;
			}, signal?: AbortSignal) => Promise<{
				error?: string | undefined;
				thumbnail_url?: string | undefined;
				file_token?: string | undefined;
				source?: string | undefined;
			}>;
		};
		fetchProxy: {
			registerProxyDomains: typeof registerProxyDomains;
		};
		sdpppX: any;
	};
};

export {};
